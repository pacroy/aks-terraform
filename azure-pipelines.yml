trigger:
  - master
  
pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: 'terraform_install'
    displayName: 'Install Terraform'
    jobs:
      - job: 'terraform_install'
        displayName: 'Install Terraform'
        steps:
          - checkout: none
          - bash: 'curl -L $(terraformDownloadUrl) -o terraform.zip'
            displayName: 'Download Terraform'
            name: 'download_terraform'
          - bash: 'unzip terraform.zip -d $(Agent.ToolsDirectory)'
            displayName: 'Unzip Terraform'
            name: 'unzip_terraform'
          - bash: 'terraform version'
            displayName: 'Check Terraform Version'
            name: 'check_terraform'
  - stage: 'terraform_plan'
    displayName: 'Plan Terraform'
    jobs:
      - job: terraform_plan
        displayName: 'Plan Terraform'
        steps:
          - bash: >
              terraform init
                  -backend-config=storage_account_name=$(backendAzureRmStorageAccountName)
                  -backend-config=container_name=$(backendAzureRmContainerName)
                  -backend-config=key=$(backendAzureRmKey)
                  -backend-config=resource_group_name=$(backendAzureRmResourceGroupName)
                  -backend-config=subscription_id=$(backendAzureRmSubscriptionId)
                  -backend-config=tenant_id=$(backendAzureRmTenantId)
                  -backend-config=client_id=$(backendAzureRmClientId)
                  -backend-config=client_secret=$(backendAzureRmClientSecret)
            displayName: 'Init Terraform'
            name: 'init_terraform'
          - bash: >
              terraform plan -out=tfplan
                  -var subscription_id=$(subscriptionId)
                  -var tenant_id=$(tenantId)
                  -var client_id=$(servicePrincipleId)
                  -var client_secret=$(servicePrincipleSecret)
                  -var resource_group_name=$(aksResourceGroupName)
                  -var location=$(aksLocation)
                  -var aks_cluster_name=$(aksClusterName)
                  -var aks_client_id=$(aksServicePrincipleId)
                  -var aks_client_secret=$(aksServicePrincipleSecret)
                  -var tag_cluster=$(aksClusterNickname)
            displayName: 'Plan Terraform'
            name: 'plan_terraform'
          # - task: TerraformTaskV1@0
          #   displayName: 'Init Terraform'
          #   inputs:
          #     provider: 'azurerm'
          #     command: 'init'
          #     backendServiceArm: $(backendAzureRmServiceName)
          #     backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
          #     backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
          #     backendAzureRmContainerName: $(backendAzureRmContainerName)
          #     backendAzureRmKey: $(backendAzureRmKey)
          # - task: TerraformTaskV1@0
          #   displayName: 'Plan Terraform'
          #   inputs:
          #     provider: 'azurerm'
          #     command: 'plan'
          #     commandOptions: '-out=tfplan -input=false -var resource_group_name=$(aksResourceGroupName) -var location=$(aksLocation) -var aks_cluster_name=$(aksClusterName) -var aks_client_id=$(aksServicePrincipleId) -var aks_client_secret=$(aksServicePrincipleSecret) -var tag_cluster=$(aksClusterNickname)'
          #     environmentServiceNameAzureRM: $(aksAzureRmServiceName)
          - publish: tfplan
            artifact: terraform-plan
            displayName: Publish Terraform Plan
  - stage: 'terraform_apply'
    displayName: 'Apply Terraform'
    jobs:
      - deployment: apply_terraform
        displayName: 'Apply Terraform'
        environment: $(aksADOEnvironmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: TerraformTaskV1@0
                  displayName: 'Init Terraform'
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    backendServiceArm: $(backendAzureRmServiceName)
                    backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
                    backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
                    backendAzureRmContainerName: $(backendAzureRmContainerName)
                    backendAzureRmKey: $(backendAzureRmKey)
                - task: TerraformTaskV1@0
                  displayName: 'Apply Terraform'
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    commandOptions: '-auto-approve ../terraform-plan/tfplan'
                    environmentServiceNameAzureRM: $(aksAzureRmServiceName)