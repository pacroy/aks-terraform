trigger: none
pr: none
  
pool:
  vmImage: 'ubuntu-18.04'

stages:
  - stage: 'preparations'
    displayName: 'Preparations'
    jobs:
      - job: 'check_variables'
        displayName: 'Check Pipeline Variables'
        steps:
          - checkout: none
          - bash: |
              [ -z "$(terraformDownloadUrl)" ] && echo 'Variable "terraformDownloadUrl" is not set' && exit 1
              [ -z "$(helmDownloadUrl)" ] && echo 'Variable "helmDownloadUrl" is not set' && exit 1
              [ -z "$(backendAzureRmSubscriptionId)" ] && echo 'Variable "backendAzureRmSubscriptionId" is not set' && exit 1
              [ -z "$(backendAzureRmTenantId)" ] && echo 'Variable "backendAzureRmTenantId" is not set' && exit 1
              [ -z "$(backendAzureRmClientId)" ] && echo 'Variable "backendAzureRmClientId" is not set' && exit 1
              [ -z "$(backendAzureRmClientSecret)" ] && echo 'Variable "backendAzureRmClientSecret" is not set' && exit 1
              [ -z "$(backendAzureRmResourceGroupName)" ] && echo 'Variable "backendAzureRmResourceGroupName" is not set' && exit 1
              [ -z "$(backendAzureRmStorageAccountName)" ] && echo 'Variable "backendAzureRmStorageAccountName" is not set' && exit 1
              [ -z "$(backendAzureRmContainerName)" ] && echo 'Variable "backendAzureRmContainerName" is not set' && exit 1
              [ -z "$(backendAzureRmKey)" ] && echo 'Variable "backendAzureRmKey" is not set' && exit 1
              [ -z "$(subscriptionId)" ] && echo 'Variable "subscriptionId" is not set' && exit 1
              [ -z "$(tenantId)" ] && echo 'Variable "tenantId" is not set' && exit 1
              [ -z "$(servicePrincipleId)" ] && echo 'Variable "servicePrincipleId" is not set' && exit 1
              [ -z "$(servicePrincipleSecret)" ] && echo 'Variable "servicePrincipleSecret" is not set' && exit 1
              [ -z "$(aksResourceGroupName)" ] && echo 'Variable "aksResourceGroupName" is not set' && exit 1
              [ -z "$(aksLocation)" ] && echo 'Variable "aksLocation" is not set' && exit 1
              [ -z "$(aksClusterName)" ] && echo 'Variable "aksClusterName" is not set' && exit 1
              [ -z "$(aksServicePrincipleId)" ] && echo 'Variable "aksServicePrincipleId" is not set' && exit 1
              [ -z "$(aksServicePrincipleSecret)" ] && echo 'Variable "aksServicePrincipleSecret" is not set' && exit 1
              [ -z '$(resourceTags)' ] && echo 'Variable "resourceTags" is not set' && exit 1
              [ -z "$(clusterIssuerContactEmail)" ] && echo 'Variable "clusterIssuerContactEmail" is not set' && exit 1
              [ -z "$(aksNodeSize)" ] && echo 'Variable "aksNodeSize" is not set' && exit 1
              [ -z "$(aksNodeCount)" ] && echo 'Variable "aksNodeCount" is not set' && exit 1
              echo 'All variables are set'
            displayName: 'Check Pipeline Variables'
            name: 'check_variables'
  - stage: 'terraform_plan'
    displayName: 'Plan Terraform'
    jobs:
      - job: terraform_plan
        displayName: 'Plan Terraform'
        steps:
          - task: Bash@3
            displayName: 'Check tool version'
            inputs:
              targetType: 'inline'
              script: |
                terraform version
                helm version
          - bash: |
              set -ex
              terraform init \
                  -backend-config=storage_account_name=$(backendAzureRmStorageAccountName) \
                  -backend-config=container_name=$(backendAzureRmContainerName) \
                  -backend-config=key=$(backendAzureRmKey) \
                  -backend-config=resource_group_name=$(backendAzureRmResourceGroupName) \
                  -backend-config=subscription_id=$(backendAzureRmSubscriptionId) \
                  -backend-config=tenant_id=$(backendAzureRmTenantId) \
                  -backend-config=client_id=$(backendAzureRmClientId) \
                  -backend-config=client_secret=$(backendAzureRmClientSecret)
            displayName: 'Init Terraform'
            name: 'init_terraform'
          - bash: |
              set -ex
              terraform providers
              terraform plan -out=tfplan \
                  -var subscription_id=$(subscriptionId) \
                  -var tenant_id=$(tenantId) \
                  -var client_id=$(servicePrincipleId) \
                  -var client_secret=$(servicePrincipleSecret) \
                  -var resource_group_name=$(aksResourceGroupName) \
                  -var location=$(aksLocation) \
                  -var aks_cluster_name=$(aksClusterName) \
                  -var aks_node_size=$(aksNodeSize) \
                  -var aks_node_count=$(aksNodeCount) \
                  -var aks_client_id=$(aksServicePrincipleId) \
                  -var aks_client_secret=$(aksServicePrincipleSecret) \
                  -var cluster_issuer_email=$(clusterIssuerContactEmail) \
                  -var tags='$(resourceTags)'
            displayName: 'Plan Terraform'
            name: 'plan_terraform'
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.SourcesDirectory)'
              artifact: 'terraform'
              publishLocation: 'pipeline'
  - stage: 'terraform_apply'
    displayName: 'Apply Terraform'
    jobs:
      - deployment: apply_terraform
        displayName: 'Apply Terraform'
        environment: $(environmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none
                - bash: |
                    set -ex
                    cd $(Pipeline.Workspace)/terraform
                    chmod -R +x .terraform/plugins/linux_amd64
                    helm repo add stable https://kubernetes-charts.storage.googleapis.com
                    helm repo add jetstack https://charts.jetstack.io
                    helm repo add pacroy https://raw.githubusercontent.com/pacroy/helm-repo/master
                    helm repo update
                    terraform providers
                    terraform apply -auto-approve tfplan
                  displayName: 'Apply Terraform'
                  name: 'apply_terraform'
